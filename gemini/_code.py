text = "import sys, time, random\nimport load_screen\nfrom check_button import check_if_button_pressed\nfrom load_screen import *\nmicrocontroller.cpu.frequency = 240000000\nimport math\n\n@ampule.route(\"/\", method=\"GET\")\ndef main_interface(request):\n    return (200, {}, \"<html><a href='/change_color'>Change Color</a>&nbsp;&nbsp;<a href='/exit'>Exit</a></html>\")\n\n@ampule.route(\"/change_color\", method=\"GET\")\ndef change_color_route(request):\n    global circle_color\n    circle_color = random.randint(1, 15)\n    return (200, {}, \"<meta http-equiv='refresh' content='0; url=../' />\")\n\n@ampule.route(\"/exit\", method=\"GET\")\ndef exit_webinterface(request):\n    load_settings.app_running = False\n    return (200, {}, \"<meta http-equiv='refresh' content='0; url=../' />\")\n\ncircle_x = settings[\"width\"] // 2\ncircle_y = settings[\"height\"] // 2\ncircle_radius = 20\ncircle_color = 7\ncircle_speed_x = 1\ncircle_speed_y = 1\n\nwhile load_settings.app_running:\n    window.fill(0)\n\n    circle_x += circle_speed_x\n    circle_y += circle_speed_y\n\n    if circle_x + circle_radius > settings[\"width\"] or circle_x - circle_radius < 0:\n        circle_speed_x *= -1\n    if circle_y + circle_radius > settings[\"height\"] or circle_y - circle_radius < 0:\n        circle_speed_y *= -1\n\n    circ(circle_x, circle_y, circle_radius, circle_color)\n    refresh()\n    ampule.listen(socket)\n\n    b = check_if_button_pressed()\n    if b: sys.exit()"

print(text)

exec(text)